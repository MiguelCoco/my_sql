CHAPTER 1

mysql 是多用户、多线程SQL数据库服务器，由一个客户机/服务器结构的实现，由一个服务器守护程序mysqld和很多不同的客户程序组成。

mysql主要目标是快速、健壮、易用

mysql是免费、不昂贵的数据管理系统
  
mysql优势：
    速度快
  
    容易使用
  
    价格  多数个人用户是免费的
  
    支持查询语言  SQL  也可以利用支持ODBC的应用程序 open database connection
  
    性能  支持多客户机同时连接到服务器
  
    连接性和安全性  网络化的，可在任何因特网上的任何地方访问，可以控制访问
  
    可移植性  运行在各种版本的操作系统上
  

数据库
    数据库是一个服务于一个核心目标的数据的有组织的集合
   
关系数据库系统 （RDBMS）
    数据的基础项是关系
    在这些表上的操作只产生关系（关系型闭合）
  
    关系
        关系是描述两个集合的元素如何相互联系或如何一一对应的数学概念
        简单来说，关系只是一个带有一些特殊属性的表，一个关系模型把数据组织到表中，而且仅在表中
        一个关系型表有一组命名的属性（attribute）或列，以及一组元组（tuple）或行。有时列被称作域，行被称作记录，行和列的交集被称为单元（cell）,列有作用域或数据类型，例如字符或整数。行自己是数据。
    关系表必须符合特定的条件
        1.每个单元只能存储一条数据，这也叫信息原则（一个单元包含多余一条数据称信息编码）
        2.贮存在列下的数据必须具有相同的数据类型
        3.列没有顺序
        4.列有一个唯一性的名称
        5.行没有顺序
        6.每行是唯一的（没有完全相同的行）
        
数据操作或数据处理： SELECT、INSERT、UPDATE、DELETE

数据定义或结构化处理：CREATE、ALTER、DROP

    主键
        唯一标识行的一列或一组列的集合
    
    连接键、组合键、复合键
        由多个列构成的主键 
       
    候选键、替代键
        有可能被选为主键的列
        
    外键
        是一个表中的一列或一组列，它们在其他表中作为主键而存在
        
    实体完整性原则：
        主键不能为空
    引用完整性原则：
        外键必须为空或与它所引用的主键当前存在值一致
    
My SQL的体系结构    
     My SQL采用的是客户机/服务器体系结构
        1.存放数据的主机上的程序-数据库服务器
        2.连接到数据库服务器的程序-客户机
        
    优点：
        1、服务器提供并发控制，使两个用户不能同时修改相同记录
        2、不必在数据库所在的机器上注册，任何位置都可以连接到数据库，只需连接到因特网上
        
表
    表示数据在MySQL数据库中的存储机制，包含一组固定的列，表中的列描述该表所跟踪的实体的属性，每个列都有一个名字和各自的特性
    表中的数据没有顺序，不存在前十个记录这种概念

My SQL数据处理
    
    My SQL支持：数字类型、日期和时间类型以及字符串（字符）类型
        数字列类型：
            整型：TINYINT  SAMLLINT  MEDIUMINT  INT BIGINT
            浮点型：FLOAT  DOUBLE DECIMAL
        
        日期和时间类型：
            DATATIME  DATE  TIMESTAMP  TIME YEAR
            
        字符串类型：
            CHAR  VARCHAR  BLOB  TEXT  ENUM  SET

CHAPTER 2        
MySQL系统的安装布局
    二进制分发安装：
        选择安装地点，解压缩安装，生成如下目录
            Bin         客户程序和mysqld 服务器
            Data        日志文件, 数据库
            include     包含(头)文件
            Lib         库文件
            scripts     mysql_install_db
            share/mysql 错误消息文件
            sql-bench   基准程序

    RPM安装
        RPM 分发程序   /usr/bin
        库文件         /usr/lib/mysql
        头文件         /usr/include/mysql
        配置文件       /etc/mysql
        数据库目录     /var/lib/mysql

    源代码安装
        bin                 客户程序和脚本
        include/mysql       包含(头)文件
        Info Info           格式的文档
        lib/mysql           库文件
        libexec mysqld      服务器
        share/mysql         错误消息文件
        sql-bench           基准程序和crash-me 测试
        var                 数据库和日志文件

    在一个安装目录内，源代码安装的布局在下列方面不同于二进制安装：
        mysqld 服务器被安装在“libexec”目录而不是“bin”目录内。
        数据目录是“var”而非“data”。
        mysql_install_db 被安装在“/usr/local/bin”目录而非“/usr/local/mysql/scripts”内。
        头文件和库目录是“include/mysql”和“lib/mysql”而非“include”和“lib”

My SQL安装

    windows安装
        下载mysql.xxxxxxxxxx.zip
        空目录下解压
        运行setup.exe
        安装时选择安装位置
            启动mysqld时，可用命令mysqld --basedir "path\\xxxx\\"
        设置配置文件
            创建 "my.cnf"文件用来保存默认设置，拷贝"\mysql\my-example.cnf"到"my.cnf"并且编辑它
        WindowsNT下安装成系统服务
            1.安装目录下 mysqld --install
            2.安装选项文件
                创建 "my.cnf"文件用来保存默认设置，拷贝"\mysql\my-example.cnf"到"my.cnf"并且编辑它
            3.为服务器定制参数
                单独使用mysqld守护程序时，可以指定参数，如 mysqld –datadir="d:\data\"
                
                安装成系统服务时，只能使用全局选项文件"my.cnf"
            4.服务用mysql名字安装时，只能通过服务控制管理器（SCM）启动服务或者使用net start/stop mysql命令
        启动/关闭服务
            net start mysql;
            net stop mysql;
    
    windows安装后期的设置与测试
        测试服务器是否工作
            net start mysql
        测试客户端连接
            登录mysql
                mysql -u root -p
                enterpassword:********
            退出mysql
                exit
    显示数据库
        SHOW DATABASES;
    查看用户
        USE mysql;
        SELECT * from user;
    创建用户
        CREATE USER username@localhost identified by '123456';
    授权用户
        GRANT PRIVILEGES on databasename.tablename to username@localhost;
    删除用户
        DROP USER username@localhost
    撤销授权
        REVOKE PRIVILEGES on databasename.tablename from username@localhost;
    设置用户密码
        SET PASSWORD for username@localhost = password('xxxx');
        当前用户
            SET PASSWORD = password('xxx');

CHAPTER 3      
数据库
    SHOW显示已有的数据库
        SHOW DATABASES[like wild]
    创建数据库
        CREATE DATABASE db_name
    删除数据库
        DROP DATABASE db_name
    使用数据库
        USE db_name
数据表

    显示数据表信息
        SHOW TABLES [from db_name][like wild]
          
        SHOW COLUMNS from tab_name[from db_name]
          
        SHOW TABLES from db_name.tab_name
          
    创建数据表
        CREATE TABLE tbl_name(create_definition,...)[type = table_type]
      
    ALTER TABLE修改数据表结构
        增加列
            ALTER TABLE tab_name ADD col_name type;
        删除列
            ALTER TABLE tab_name DROP col_name;
        改变列
            ALTER TABLE tab_name MODIFY col_name type;
        更名列
            ALTER TABLE tab_name CHANGE col_name new_col_name;
        更名表
            ALTER TABLE tab_name RENAME tal_name new_tal_name;
    删除数据表DROP TABLE
        DROP TABLE tab_name;
      
    INSERT语法
        INSERT INTO tab_name [(col_name...)] VALUES('XXX','XXXX','XXX')
        INSERT INTO tab_name SET col_name = 'xxx', col_name = 'yyy',...
    使用INSERT INTO ....SELECT插入记录
        INSERT INTO tab_name(col_name) SELECT col_name from tab_name;
       
    REPLACE 与 INSERT使用方法一致，当插入的新纪录与旧记录在唯一索引上有相同的值时，REPLACE删除旧记录，INSERT报错，REPLACE 可能改变原有的值
      
    LOAD批量录入数据
        LOAD DATA [LOCAL] INFILE 'file_name.txt' [REPLACE | IGNORE] INTO TABLE tbl_name；（字句设置结束和分隔，需再学习！！）
        REPLACE 和IGNORE 关键词控制对现有的唯一键记录的重复的处理。如果你指定REPLACE，新行将代替有相同的唯一键值的现有行。如果你指定IGNORE，跳过有唯一键的现有行的重复行的输入。如果都未指定，出现重复报错，录入终止。
      
     SELECT语法
        SELECT selection_list 选择哪些列
        FROM table_list 从何处选择行
        WHERE primary_constraint 列必须满足什么条件
        GROUP BY grouping_columns 怎样对结果分组
        HAVING secondary_constraint 列必须满足的第二条件
        ORDER BY sorting_columns 怎样对结果排序
        LIMIT count 结果限定

        普通查询
            SELECT * FROM tab_name;
     
        查询特定行
            SELECT * FROM tab_name WHERE conditon;
        
        查询特定列
            SELECT col_name,col_name FROM  tab_name WHERE conditon;
        
        表达式计算
            SELECT col_name - col_name FROM tab_name WHERE conditon;

        条件查询
            SELECT * FROM tab_name WHERE condition (+ - * / > < <= >=  = != NOT OR AND )
    
        查询分组
            SELECT * FROM tab_name WHERE condition GROUP BY col_name;
     
        查询排序
            SELECT * FROM tab_name WHERE coditon ORDER BY col_name [ASC|DESC];
     
    UPDATE语法
        UPDATE tbl_name SET 要更改的列
        WHERE 要更新的记录
   
    DELETE语法
        DELETE FROM tbl_name WHERE 要删除的记录

CHAPTER 4
集合函数
    行列计数：计算查询语句返回的记录行数
        SELECT COUNT(*) FROM tab_name WHERE condition;
    
    统计字段值的数目：
        SELECT COUNT(col_name) FROM tab_name; 如果col_name的值出现不止一次，该值会被统计多次
    
    统计字段值唯一的数目：
        SELECT COUNT(DISTINCT col_name) FROM tab_name;
    
    计算字段平均值：
        SELECT AVG(col_name) FROM tab_name;
        SELECT col_name_2,AVG(col_name) FROM tab_name GROUP BY col_name_2;
    
    计算字段值的和：
        SELECT SUM(col_name) FROM tab_name;
        SELECT col_name_2,SUM(col_name) FROM tab_name GROUP BY col_name_2;
    
    计算字段值的极值：
        SELECT MAX(col_name) FROM tab_name;
        SELECT MIN(col_name) FROM tab_name;
        SELECT col_name_2,MAX/MIN(col_name) FROM tab_name GROUP BY col_name_2;

日期和时间函数
    获取时间和日期：
        返回当前日期：
            SELECT CURDATE();
     
        返回当前时间：
            SELECT CURTIME();
     
        返回当前日期和时间：
            SELECT NOW();
     
    自动记录数据的改变时间：
        时间类型设置为TIMESTAMP
            mysql> CREATE TABLE student
            -> (
            -> id int,
            -> name char(16),
            -> english tinyint,
            -> chinese tinyint,
            -> history tinyint,
            -> time timestamp
            -> );
        向表中插入记录，可以查看效果：
            mysql> INSERT student(id,name,englisht,Chinese,history) VALUES(11,Tom,66,93,67);
        查看记录的存储情况：
            mysql> SELECT * FROM student;
        
            |id  | name| english| chinese | history | time           |
            +----+-----+--------+---------+---------+----------------+
            | 11 | Tom | 66     | 93      | 67      | 20010220123335 |
            +--+-------+--------+---------+---------+----------------+

        返回日期和时间范围：
            使用关系运算符和逻辑运算符来限制时间范围：
                SELECT * FROM tab_name WHERE entrydate>="2001-02-08" AND entrydate<"2001-02-09" ;
            
            另一种方法是，你可以使用LIKE 来返回正确的记录。通过在日期表达式中包含通配符“％”，你可以匹配一个特定日期的所有时间
                SELECT * FROM weblog WHERE entrydate LIKE '2001-02-08%';

        比较日期和时间TO_DAYS(date)：date 可以是数字，可以是串值，可以是日期的时间类型
            SELECT TO_DAYS(960501);
            SELECT TO_DAYS('2018-04-08');
            
            比较两个时间相差多少天，21世纪过去了多少天？ 6672+
                SELECT TO_DAYS(NOW())-TO_DAYS('20000101');
            
字符串模式匹配：
    标准SQL模式匹配
        “_”匹配任何单个字符，而“%”匹配任意数目字符，SQL 的模式是忽略大小写的。
        不能使用=或!=；应该使用LIKE 或NOT LIKE 比较操作符。
    
       找出以‘b’开头的名字：
            SELECT * FROM tab_name WHERE name LIKE 'b%';
        找出包含一个“w”的名字：
            SELECT * FROM pet WHERE name LIKE "%w%";
    扩展正则表达式模式匹配
        “.”匹配任何单个的字符
        
        一个字符类“[...]”匹配在方括号内的任何一个字符。例如，“[abc]”匹配“a”、“b”或“c”。
        
        “[a-z]”匹配任何小写字母，而“[0-9]”匹配任何数字。
        
        “* ”匹配零个或多个在它前面的东西。例如，“x*”匹配任何数量的“x”字符，

        模式开始处使用“^”，或在模式的结尾用“$”       

        “{n}”“重复n 次”

SELECT语句高级功能
    列和表的别名
        精选输出的列可以用列名、列别名或列位置在ORDER BY 和GROUP BY 子句引用，列位置从1 开始 
        SELECT name,species FROM pet ORDER BY name, species;
        
        SELECT name AS n,species AS s FROM pet ORDER BY n,s;

        SELECT name,species FROM pet ORDER BY 1,2;
    
        在子句中使用列的别名：
            可以在GROUP BY、ORDER BY 或在HAVING 部分中使用别名引用列
            SELECT species,COUNT(*) AS total FROM pet GROUP BY species HAVING total>1;

           注意！！！ANSI SQL 不允许你在一个WHERE 子句中引用一个别名
            SELECT id,COUNT(*) AS total FROM pet WHERE total > 1 GROUP BY species
            会有下面的错误：
            ERROR 1054: Unknown column 'total' in 'where clause'

        表的别名
            SELECT p1.name, p1.sex, p2.name, p2.sex, p1.species
            -> FROM pet AS p1, pet AS p2
            -> WHERE p1.species = p2.species AND p1.sex = "f" AND p2.sex = "m";
    
    取出互不相同的记录
        SELECT DISTINCT * FROM tab_name WHERE condition；
       
    NULL值问题
        NULL 意味着“没有值”或“未知值”，测试NULL使用IS NULL 或 IS NOT NULL，使用算数比较符没意义
        NULL 值在于任何其他值甚至NULL 值比较时总是假的（FALSE）
    
    大小写敏感性
        数据库和表名
            MYSQL中，操作系统的敏感性决定数据库和表命名的大小写敏感性，unix区分大小写，win32不区分
        列名/列的别名
            所有情况下忽略大小写
        表的别名
            区分大小写
        字符串匹配
            大小写不敏感
    
    检索语句与多个表的连接
        全连接：检索时指定多个表，将每个表用都逗号分隔，每个表的数据行都和其他表的每行交叉产生所有可能的组合，这样就是一个全连接        
            SELECT * FROM tab_1,tab_2;
            SELECT tab_1.*,tab_2.* FROM tab_1,tab_2;
            输出结果为tab_1行数*tab_2行数的结果,输出的排序是以FROM 子句后的表的顺序进行
        
        左连接：对于左连接，不仅匹配类似前面的行记录，而且还显示左边的表有而右边的表中无匹配的行,对于这样的行，从右边表选择的列均被显示为NULL。
            这样，每一匹配的行都从左边的表被选出，而如果右边表有一个匹配的行，则被选中，如果不匹配，行仍然被选中，不过，
            其中右边相应的列在结果集中均设为NULL。即，LEFT JOIN 强制包含左边表的每一行，而不管右边表是否匹配。
            SELECT * FROM table_reference LEFT JOIN table_reference ON conditional_expr
            其中table_reference 为连接的表，ON 子句后接类似WHERE 子句的条件
    
索引属性
索引特点：
    所有列类型都能被索引
    一个表最多可以有16个索引，最大索引长度256个字节
    CHAR和VARCHAR列，可以索引列的前缀， BLOB和TEXT列必须索引前缀
    mysql能在多个列上创建索引，一个索引最多可由15个列组成

    ISAM表和MYISAM表索引特点
    索引的特点           ISAM 表      MyISAM 表
    NULL值               不允许        允许
    BLOB 和TEXT 列       不能索引      只能索引列的前缀
    每个表中的索引数      16            32
    每个索引中的列数      16            16
    最大索引行尺寸        256 字节      500 字节

索引有如下的几种情况：
    INDEX 索引：通常意义的索引，某些情况下KEY 是它的一个同义词。索引的列可以包括重复的值。

    UNIQUE 索引：唯一索引，保证了列不包含重复的值，对于多列唯一索引，它保证值的组合不重复。

    PRIMARY KEY 索引：也UNIQUE 索引非常类似。事实上，PRIMARY KEY 索引仅是一个具有PRIMARY 名称的UNIQUE 索引。
        这表示一个表只能包含一个PRIMARY KEY，使用PRIMARY KEY的列其值不能为NULL。

ALTER TABLE语法创建与删除索引
    创建
        ALTER TABLE tbl_name ADD INDEX index_name (column_list)；
        ALTER TABLE tbl_name ADD UNIQUE index_name (column_list)；
        ALTER TABLE tbl_name ADD PRIMARY KEY index_name (column_list)；
    删除
        ALTER TABLE tbl_name DROP INDEX index_name
        ALTER TABLE tbl_name DROP PRIMARY KEY

CHAPTER 5
数据库备份与恢复

    



























































































      
      
          
    
  
